#!/usr/bin/env python3
# vxcli
# Command line interface executable.

######################
# Imports & Globals
######################

import argparse
import vxcli.command
import os
import sys


######################
# Environment variables
######################


# We require following environment variables:
REQUIRED_ENVVARS = [
    ("WIND_HOME",           "path to the folder that contains wrenv.sh (e.g., /opt/WindRiver)"),
    ("WIND_BASE",           "path to the folder with vxWorks distribution (e.g., $WIND_HOME/vxworks/$WIND_RELEASE_ID)"),
    ("WIND_HOST_TYPE",      "host type (e.g., x86-linux2)"),
    ("WIND_VX7_HOST_TYPE",  "host type for VxWorks 7 (e.g., x86_64-linux)"),
    ("WRSD_LICENSE_FILE",   "path to the folder with license file (e.g., $WIND_HOME/license)"),
    ("LD_LIBRARY_PATH",     "library path extended with lmapi-5"),
    ("WIND_WB_HOSTTOOLS",   "path to the folder with hosttools like wrpython (e.g., $WIND_HOME/workbench-4/$WIND_RELEASE_ID/x86_64-linux2)"),
    ("WIND_RELEASE_ID",     "current version of VxWorks (e.g., 23.09)"),
    ("WIND_WRWB_PATH",      "path to the folder that contains wrwb (e.g., $WIND_HOME/workbench-4/eclipse/x86_64-linux2"),
]

#os.environ["WIND_RELEASE_ID"] = "22.06"
#os.environ["WIND_BASE"] = os.environ["WIND_HOME"] + "/vxworks/" + os.environ["WIND_RELEASE_ID"]
#os.environ["WIND_HOST_TYPE"] = "x86-linux2"
#os.environ["WIND_VX7_HOST_TYPE"] = "x86_64-linux"
#os.environ["WRSD_LICENSE_FILE"] = os.environ["WIND_HOME"] + "/license"
#os.environ["LD_LIBRARY_PATH"] = (os.environ["LD_LIBRARY_PATH"] + ":" if "LD_LIBRARY_PATH" in os.environ else "") + os.environ["WRSD_LICENSE_FILE"] + "/lmapi-5/x86-linux2/lib"
#os.environ["WIND_WB_HOSTTOOLS"] = os.environ["WIND_HOME"] + "/workbench-4/" + os.environ["WIND_RELEASE_ID"] + "/x86_64-linux2"


######################
# Arguments
######################

PARSER = argparse.ArgumentParser(
    prog = "vxcli",
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description = """
Command line interface for WindRiver Workbench / VxWorks.

Following environment variables are required:
""" + "\n".join(" %-15s\t%s" % (var[0], var[1]) for var in REQUIRED_ENVVARS),
    add_help = False,
)


# Help
# As some commands use '-h' for themselves, use only '--help' for help.
PARSER.add_argument('--help',
    action = "help",
    default = argparse.SUPPRESS,
    help = "show this help message and exit"
)


# Subcommands
SUBPARSER = PARSER.add_subparsers(
    dest = "_command",
    metavar = "subcommand",
)
SUBPARSER.required = True

for command in vxcli.command.__all__:
    _c = SUBPARSER.add_parser(command,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        add_help = False,
        help = vxcli.command.__getattribute__(command).HELP,
    )

    _c.add_argument('--help',
        action = "help",
        default = argparse.SUPPRESS,
        help = "show this help message and exit"
    )

    #_c._actions = vxcli.command.__getattribute__(command).PARSER._actions
    vxcli.command.__getattribute__(command).init_parser(_c)


######################
# Main
######################

if __name__ == '__main__':
    args, unknown = PARSER.parse_known_args()


    # Check for required environment variables
    for var in REQUIRED_ENVVARS:
        if var[0] not in os.environ:
            sys.stderr.write("Current environment lacks variable '%s'. Run 'wrenv.linux' from the WindRiver folder first.\n" % var[0])
            exit(1)


    # Remove _command
    kwargs = dict(args._get_kwargs())
    del kwargs["_command"]

    vxcli.command.__getattribute__(args._command).run(**kwargs, other_args = unknown)
